{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Projectile Arcs Docs! For more assets, games and stuff you should visit polyhavoc.com .","title":"Home"},{"location":"#welcome-to-the-projectile-arcs-docs","text":"For more assets, games and stuff you should visit polyhavoc.com .","title":"Welcome to the Projectile Arcs Docs!"},{"location":"CustomizingArcs/","text":"Customizing Arcs With minimal effort, arcs can be altered to be very different in visual style! First, create a new Niagara System: Next, select New system from template : Choose FX Arc : Once created, your new particle system consists of 2 main elements: the Arc and the ProjectileTarget . Both can be modified like any particle. By now, you may be noticing only an arc in the viewport! This is normal, because the arc need geometry behind to render. Let's get our preview area setup properly. Go to Window/Preview Scene Settings , and find the window this summons. Next, search for Show Floor , and set it to true. Now our particle should be rendering properly in the editor! Now we need to get into the materials! There are two main materials for the arcs, with different customization options: M_ArcBase and M_GoalSphere . M_ArcBase: Handles the actual path rendering. M_GoalSphere: Projects a sphere onto the world, and handles the impact point of the arc. To modify the look of your arc, you'll need to make a material instance of either (or both!). After modifying the material to have gaps, outlines, gradients, etc... Make sure to set them in your new Niagara System! To change the material, select the Ribbon Renderer or the Mesh Renderer for each respective effect. Then locate the material section, and assign your new material(s). Along with material effects, you can also change User Settings for the particle system here, to change the defaults of the system. From User Parameters you can change the color, radius and debug the points for the arc. You can also change the color and radius from Update Arc nodes at runtime! You can even add nodes to the arc (like the jitter node) to make completely new effects! To use your new effect, simply choose it for the override effect in your CreateArc node!","title":"Radial Menu Settings"},{"location":"CustomizingArcs/#customizing-arcs","text":"With minimal effort, arcs can be altered to be very different in visual style! First, create a new Niagara System: Next, select New system from template : Choose FX Arc : Once created, your new particle system consists of 2 main elements: the Arc and the ProjectileTarget . Both can be modified like any particle. By now, you may be noticing only an arc in the viewport! This is normal, because the arc need geometry behind to render. Let's get our preview area setup properly. Go to Window/Preview Scene Settings , and find the window this summons. Next, search for Show Floor , and set it to true. Now our particle should be rendering properly in the editor! Now we need to get into the materials! There are two main materials for the arcs, with different customization options: M_ArcBase and M_GoalSphere . M_ArcBase: Handles the actual path rendering. M_GoalSphere: Projects a sphere onto the world, and handles the impact point of the arc. To modify the look of your arc, you'll need to make a material instance of either (or both!). After modifying the material to have gaps, outlines, gradients, etc... Make sure to set them in your new Niagara System! To change the material, select the Ribbon Renderer or the Mesh Renderer for each respective effect. Then locate the material section, and assign your new material(s). Along with material effects, you can also change User Settings for the particle system here, to change the defaults of the system. From User Parameters you can change the color, radius and debug the points for the arc. You can also change the color and radius from Update Arc nodes at runtime! You can even add nodes to the arc (like the jitter node) to make completely new effects! To use your new effect, simply choose it for the override effect in your CreateArc node!","title":"Customizing Arcs"},{"location":"GettingStarted/","text":"Getting Started Projectile Arcs in Rustwalker Legends Projectile Arcs are a relatively quick process, and can be customized to look how you want. Creating your first arc First, find the node where you'll be creating the arcs from. In this situation, I'll be creating an arc on the aim key down (Right Mouse Button) . From the on pressed node, drag off and search for CreateArc . This arc will need to be stored for later use, so put that into a new variable. Event Binding Next up, the arc needs to be updated. This is done with an event dispatcher called Request Positions . If you're not familiar with Event Dispatchers don't worry, you won't have to deal with them much at all here. Just drag off of the blue pin of the new arc, and search for Assign Request Positions . This will create a new event for us, bound to the event dispatcher RequestPositions which will be called every frame of the arcs existence . Updating the Arc From this new node, you'll be able to update the arcs start, end, color, height, etc... every frame. Just search for Update Arc while dragging from the blue pin. These macros were design to chain together, making it easy to quickly update whatever parts needed on the arc without making the graph messy. Just take the return node and connect to another set. You can call as many of these as necessary, or just the UpdateArcPositions . Next, we need to have the arc clean up after use. When your done with the arc, just call CleanupArc , and it'll be removed from the game. Launching Projectiles Now, you probably want to throw something. I do too, but that could be because I've been writing documentation. To make a projectile fly, create an actor blueprint with a Projectile Movement Component . Make sure the root component has collision, and spawn in an actor from the blueprint you created your arc in. Next, it's just a matter of calling LaunchActorProjectileOnArc (or LaunchProjectileOnArc if you don't want to use the actor reference). Wrapping Up You should now have a thrown projectile, that goes where you point your arc! Next, we'll go over how to make a new arc that looks unique for your game!","title":"Setting Up Input"},{"location":"GettingStarted/#getting-started","text":"Projectile Arcs in Rustwalker Legends Projectile Arcs are a relatively quick process, and can be customized to look how you want.","title":"Getting Started"},{"location":"GettingStarted/#creating-your-first-arc","text":"First, find the node where you'll be creating the arcs from. In this situation, I'll be creating an arc on the aim key down (Right Mouse Button) . From the on pressed node, drag off and search for CreateArc . This arc will need to be stored for later use, so put that into a new variable.","title":"Creating your first arc"},{"location":"GettingStarted/#event-binding","text":"Next up, the arc needs to be updated. This is done with an event dispatcher called Request Positions . If you're not familiar with Event Dispatchers don't worry, you won't have to deal with them much at all here. Just drag off of the blue pin of the new arc, and search for Assign Request Positions . This will create a new event for us, bound to the event dispatcher RequestPositions which will be called every frame of the arcs existence .","title":"Event Binding"},{"location":"GettingStarted/#updating-the-arc","text":"From this new node, you'll be able to update the arcs start, end, color, height, etc... every frame. Just search for Update Arc while dragging from the blue pin. These macros were design to chain together, making it easy to quickly update whatever parts needed on the arc without making the graph messy. Just take the return node and connect to another set. You can call as many of these as necessary, or just the UpdateArcPositions . Next, we need to have the arc clean up after use. When your done with the arc, just call CleanupArc , and it'll be removed from the game.","title":"Updating the Arc"},{"location":"GettingStarted/#launching-projectiles","text":"Now, you probably want to throw something. I do too, but that could be because I've been writing documentation. To make a projectile fly, create an actor blueprint with a Projectile Movement Component . Make sure the root component has collision, and spawn in an actor from the blueprint you created your arc in. Next, it's just a matter of calling LaunchActorProjectileOnArc (or LaunchProjectileOnArc if you don't want to use the actor reference).","title":"Launching Projectiles"},{"location":"GettingStarted/#wrapping-up","text":"You should now have a thrown projectile, that goes where you point your arc! Next, we'll go over how to make a new arc that looks unique for your game!","title":"Wrapping Up"}]}